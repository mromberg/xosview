.\"===========================================================
.\"===========================================================
.\"           DO NOT EDIT xosview.1
.\" @configure_input@
.\"===========================================================
.TH XOSVIEW @PACKAGE_VERSION@
.UC
.SH NAME
xosview \- X based system monitor
.SH SYNOPSIS
.SY xosview
.OP OPTIONS
.\"  ================  Macros  =============================
.\"  First, let's define some handy roff macros.
.\"  A macro begins with .de <xx> where one will invoke this macro with .xx
.\"  The macro definition ends with the .. line.
.\"  I don't know what macro abbreviations are free, so I just chose a few,
.\"  and haven't noticed a problem so far!  bgrayson
.\"
.\"  There are several paragraphs that are repeated in the resource section.
.\"  Rather than typing the whole stuff out each time, we define a few macros.
.\"
.\"  The .xt macro is for ``Xresource true'' -- for enabling a
.\"  meter, like the .pm macro/-+foo.
.de xt
xosview*\\$1: (True or False)
.RS
If True then xosview will display a \\$1 meter.
.RE
..
.\"  Define a color macro for the various xosview*fooXXXColor: resources.
.\"  Usage:  .cc swap Used used "swap space"  <--  keep 'swap
.\"                                                       space' as one arg.
.de cc
xosview*\\$1\\$2Color: \fIcolor\fP
.RS
The \\$1 meter will use this color to display the \\$3 field.
.RE
..
.\"  ================  End of Macros  =============================
.SH DESCRIPTION
\fIxosview\fP is a program which displays the status of several system based
parameters.  These include CPU usage, load average, memory usage, swap
space usage, network usage, interrupts, file system capacity and more.
Each of these is displayed as a horizontal bar which is separated into color
coded regions.  Each region represents a percentage of the resource which is
being put to a particular use.  Typing a 'q' in the window will terminate
xosview.

At the moment \fIxosview\fP runs on platforms including (Linux,
NetBSD, FreeBSD, OpenBSD, dragonflyBSD, solaris, cygwin, minix and GNU).
Not all of the meters described below are supported on all
platforms.  Some of the meters may appear different depending upon the
platform \fIxosview\fP is running on.  Note that *BSD is used as
an abbreviation for all of the free BSD operating systems.

.TS
box, tab(:);
cssssss
c|c|c|c|c|c|c
l|c|c|c|c|c|c.
Supported Meters
_
Meter:Linux:*BSD:Gnu:Minix:Solaris:Cygwin
_
Load Average:yes:yes:yes:yes:yes:yes
CPU:yes:yes:yes:yes:yes:yes
Memory:yes:yes:yes:yes:yes:yes
Swap:yes:yes:yes:no:yes:yes
Page xfer:yes:yes:yes:no:yes:yes
Disk xfer:yes:yes:no:no:yes:yes
Filesys:yes:yes:yes:yes:yes:yes
Network:yes:yes:yes:no:yes:yes
Wifi quality:yes:no:no:no:no:no
Interrupt rate:yes:yes:no:no:yes:yes
Interrupts:yes:yes:no:no:no:no
Temperature:yes:yes:no:no:no:yes
Serial:?:no:no:no:no:no
Battery:yes:?:no:no:no:no
RAID:?:no:no:no:no:no
NFS:?:no:no:no:no:no
.TE

\fBNote:\fP A marker of ? indicates an untested meter.  Reports on the
status of these are welcome!

.SH OPTIONS

Almost all of these command line options are just a convenient way to set one or
more of xosview's resources.  All resouces set on the command line will override
those specified anywhere else.  Please see the \fBRESOURCES\fP section for
more details on what the resource is for and for the overall scheme of how
resource values are used.

.TS
tab(:);
llx.
--help:T{
Displays usage information to stdout and exits.
T}
 -h:\^

--version:T{
Displays the version information and exits.
T}
 -v:\^

--display \fIname\fP:T{
Sets the X display to \fIname\fP.
T}
 -display:\^

--title \fIname\fP:T{
This option sets the name xosview will tell the window manager to use for
the X window and icon.  This option overrides the xosview*title resource.
T}
 -title:\^

-geometry \fIgeometry\fP:T{
Sets the X geometry to \fIgeometry_string\fP.  This option overrides the
xosview*geometry resource.
T}
-g:\^

--foreground \fIcolor\fP:T{
The \fIcolor\fP to use for the foreground.
T}
 -fg:\^

--background \fIcolor\fP:T{
The \fIcolor\fP to use for the background.
T}
 -bg:\^

-font \fIfontName\fP:T{
Specifies the \fIfontName\fP xosview will use for labels.  This option
overrides the xosview*font resource.  Not all fonts currently work well
with xosview.  For more details see the \fBRESOURCES\fP section.
T}
-fn:\^

--iconic:T{
Request to start in an iconic state.
T}
 -iconic:\^

--name \fIname\fP:T{
Sets the Resource name xosview will use (same as the -name option
for typical X applications like xterm).  When performing resource
lookups, xosview will look under \fIname\fP, and then under
``xosview''.
T}
 -name:\^

-xrm \fIspec\fP:T{
This switch allows any of xosview's resources to be set on the command line.
An example of how the xosview*memFreeColor could be set using this option is
shown below (Note the use of \(dq to prevent the shell from expanding
\'*\' or from creating two separate arguments, \'xosview*memfreeColor:\'
and \'purple\'):
.RS
-xrm "xosview*memFreeColor: purple"
.RE
T}
-x:\^

--option \fIspec\fP:T{
This option is exactly the same as -xrm except that you do not need to
specify an instance name (such as xosview*).  It will be prepended for you.
So, this will also set the xosview*memFreeColor to purple:
.RS
-o "memFreeColor: purple"
.RE
T}
 -o:\^

--config \fIfileName\fP:T{
Load an XResource file.  This file will override (not replace) any previous
resources.  See the \fBRESOURCES\fP section for more details.
T}
 -c:\^

--xrm-dump:T{
Dump the X resouces seen by xosview to stdout and exit.  This will show a
final list of all resources seen after loading and merging is finished.
T}
 -xrmd:\^
.TE

.SH X RESOURCES

The following is a list of X resources supported by \fIxosview\fP.  Each has
a default value assigned to it.  These values can be found in the file
Xdefaults which can be obtained in the source distribution of xosview.
They can be overridden in the usual places (/usr/lib/X11/app-defaults/XOsview,
$HOME/.Xdefaults, etc.).

It should be noted that it is OK to have a resource defined for a port of
xosview that does not support the feature the resource configures.  Xosview
will simply ignore the resources that are set for it but not supported on
a given platform.

.SS Loading X Resources

The resouces used by xosview are located and loaded in the following order.
Each layer overrides the previous.  And, of course, the best match is used.
For example ".xosview*font" overrides the more generic "*font".

.RS
.nr step 1 1
From first loaded/searched to last:
.IP \n[step] 3
An embeded copy of Xdefaults used to build xosview.  So, xosview always has
a default and complete set of resources even if all other options fail.
.IP \n+[step]
Standard X11 search paths and mechanics (XAPPLRESDIR, .Xdefault, xmodmap, etc).  For full details see the X documentation. The following is a short summary:
.RS
.IP \[bu] 2
From the class file (XOsview) found in the \fPapp-defaults\fI directory
configured into xosview at compile time.
.IP \[bu]
From the class file (XOsview) in the XAPPLRESDIR (environment variable).
.IP \[bu]
From resources loaded onto the Display of the X server (by xrdb for example).
.IP \[bu]
From resources loaded onto the Screen of the Display
(again by xrdb or the like).
.IP \[bu]
From the .Xdefaults file in the users HOME (environment variable) directory.  Xosview loads this file even if your X session did not.
.IP \[bu]
From resources found in the file specified by the XENVIRONMENT environment variable.
.RE
.IP \n+[step]
Resource files specified by the -c, --config command line arguments
.IP \n+[step]
Resources set by using the -xrm command line argument(s).
.IP \n+[step]
Command line options (such as -display) that set resources.
.RE

  Note that since xosview always starts off with a complete set of resources
it requires then you only need specify those options you would like to change
from their default values.  For example your .Xdefaults file could simply
contain the line "xosview*background: blue" if all you wish is an "stock"
xosview with a blue background.

.SS General Resources

xosview*title: \fIname\fP
.RS
The string that xosview will use for the X window title.  Normally xosview
will use 'xosview@machine_name' for a title.  This resource overrides the
default behavior.
.RE

xosview*geometry: \fIgeometry_string\fP
.RS
This is a standard X geometry string that defines the size and location of
the X window used by xosview.
.RE

xosview*display: \fIname\fP
.RS
The name of the display which xosview will use to contact the X server for
creating it's window.
.RE

xosview*pixmapName: \fIname\fP
.RS
The filename of an X pixmap (xpm) file for use as a background
image.
.RE

xosview*transparent: (True or False)
.RS
If True set the window background to transparent.  Xosview will attempt to
locate and use a 32 bit ARGB visual.  If the server does not support one then
the background will not be transparent.
.RE

xosview*captions: (True or False)
.RS
If True then xosview will display meter captions.
.RE

xosview*labels: (True or False)
.RS
If True then xosview will display meter labels.
.RE

xosview*meterLabelColor: \fIcolor\fP
.RS
The color to use for the meter labels.
.RE

xosview*usedlabels: (True or False)
.RS
If True then xosview will display labels that show the percentage of the
resource (or absolute amount, depending on the meter) being used.  This
option requires that the labels option also be set to True.
.RE

xosview*usedLabelColor: \fIcolor\fP
.RS
The color to use for "used" labels.
.RE

xosview*font: \fIfont\fP
.RS
This is the font that xosview will use.  Currently the xosview text
rendering code assumes that a mono spaced (fixed width) font.  So,
things will most likely look poor with a non mono spaced font.  If the
build system supports Xft then xosview will switch to using freetype2 fonts.
Otherwise core X11 fonts are used.
.RE

xosview*background: \fIcolor\fP
.RS
This is the color that will be used for the background.
.RE

xosview*foreground: \fIcolor\fP
.RS
This is the color that will be used for the foreground.
.RE

xosview*enableStipple:	(True or False)
.RS
Change to true to try stipple support.  This is primarily for users
stuck with 1-bit monitors/display cards.  Try setting enableStipple
true.  Please give us feedback on this, if you use it.  It needs
some more work, but no one has given us any feedback so far.
.RE

xosview*graphNumCols: \fInumber\fP
.RS
This defines the number of sample bars drawn when a meter is in scrolling
graph mode. This also has the side-effect of defining the width of the
graph columns. This is only used by meters which have graph mode enabled.
.RE

.SS General Meter Resources
.RS
Meters that display their values as scalar fields generally support the
following options.  Every meter has a \fIprefix\fP name.  For example the
CPU meter's prefix is cpu.  So, you would specify the resources for it
by using cpu instead of prefix.  For example cpuPriority instead of
prefixPriority.
.RE

xosview*prefixPriority: \fIvalue\fP
.RS
This number (which must be an integer >= 1) sets the number of tenths of
a second that the meter waits between updates.  A value of 1 has xosview
update the meter 10 times per second (the fastest).  A value of 600 would
cause xosview to update the meter once a minute.
.RE

xosview*prefixUsedFormat: (float, percent or autoscale)
.RS
This resource tells xosview how to display "used" labels.  The formats work
as follows:
.TS
tab(:);
lbl.
float:Display the value as a floating point number.

percent:Display the value as a percentage of the total.

autoscale:T{
Display the absolute value and automatically print the units (K, M, or G) as
appropriate.
T}
.TE
.RE

prefixDecay: (True or False)
.RS
If True then the meter will be split vertically in two.  The top
half will show the instantaneous state, while the bottom half will
display a decaying average of the state.
.RE

xosview*prefixUsedDecay: (True or False)
.RS
If True then xosview will display the used labels as an average
over the last N samples.  N is a vague number set at the
factory.  It reduces the text drawing load on the X server.
.RE

xosview*prefixGraph: (True or False)
.RS
If this is set to True then the meter will be drawn as a horizontally
scrolling bargraph showing the state value verses time.
.RE

.SS Load Meter Resources

.xt load

.cc load Proc load

.cc load Idle idle

.cc load Warn load
.RS
This color is used when the load exceeds the loadWarnThreshold.
.RE

.cc load Crit load
.RS
This color is used when the load exceeds the loadCritThreshold.
.RE

xosview*loadWarnThreshold: \fIint\fP
.RS
This number (which must be an integer >= 1) sets the value at which
the loadmeter changes its status and color from "normal" to "alarm".
.RE

xosview*loadCritThreshold: \fIint\fP
.RS
This number (which must be an integer >= 1) sets the value at which
the loadmeter changes its status and color from "normal" to "alarm".
It is also the value that will be used for the peak of the meter.  The
meter will still show the total load in the used level when peaked.
.RE

xosview*loadCpuSpeed:   (True or False)
.RS
Display the current CPU speed in the load meter.
.RE

.SS CPU Meter Resources

.xt cpu

xosview*cpuFormat: (auto, single, all or both)
.RS
Controls the number and type of cpu meters for SMP systems.
.TS
tab(:);
llx.
single:one meter which combines all cores.
all:seperate meter for each core.  No combined meter.
both:seperate meters for each core plus a combined meter.
auto:a single meter on single core systems else both.
.TE
.RE

.cc cpu User "cpu user time"

.cc cpu Nice "cpu nice time"

.cc cpu System "cpu system time"

.cc cpu Wait "cpu IO wait time"

.cc cpu Interrupt "cpu IRQ time"

.cc cpu SoftInt   "cpu soft IRQ time"

.cc cpu Stolen    "cpu time spent in host OS"

.cc cpu Guest     "cpu time spent on guest cpu"

.cc cpu NiceGuest  "cpu time spent on niced guest cpu"

.cc cpu Free "cpu idle time"

.SS Memory Meter Resources

.xt mem

.cc mem Used "used memory"

.cc mem Buffer "buffer memory"

.cc mem Cache "cache memory"

.cc mem SwapCache "cache memory that has been swaped once"

.cc mem Free "free memory"

.cc mem Text "HP text memory"

.cc mem Other "HP ``other'' memory"

.cc mem Active "NetBSD active memory"

.cc mem Inactive "NetBSD inactive memory"

.SS Swap Meter Resources

.xt swap

.cc swap Used "used swap"

.cc swap Free "free swap"

.SS IRQ rate Meter Resources

.xt irqrate

.cc irqrate Used "used irq rate"

.cc irqrate Free "free irq rate"

xosview*irqratePeak: \fIpeakIRQRate\fP
.RS
  This number is the peak value for the field meter in irq/sec.  The used
label will still report values over this peak.
.RE

.SS Page Meter Resources

.xt page

xosview*pageBandWidth: \fIpeakVal\fP
.RS
This number is used to specify the expected maximum bandwidth (in bytes /
sec) for the page meter.  When the expected maximum bandwidth
(\fIpeakValue\fP) is exceeded then the page meter will display the relative
percentage of page swapping (25% in, 75% out).
.RE

.cc page In page-in

.cc page Out page-out

.cc page Idle idle

.SS Wireless Link Meter Resouces
.RS
This meter shows wireless link quality.  What
is quality you might ask?  It is a number between zero and 70.  Beyond that
you are on your own.  Anway Linux systems will display this value and let
you set a warning threshold when it is "low".  If this meter is enabled
and no wireless connections exists it will just sit there and display zero.
.RE

.xt wlink

xosview*wlinkBackground: \fIcolor\fP
.RS
  The \fIcolor\fP to use to display the background area of the meter.
.RE

.cc wlink Good "good wireless quality"

.cc wlink Poor "poor wireless quality"

xosview*wlinkPoorValue:  \fIvalue\fP
.RS
The threshold \fIvalue\fP to use to switch between wlinkGoodColor and
wlinkPoorColor.
.RE

.SS Network Meter Resources

.xt net

xosview*netBandwidth: \fImaxBytes\fP
.RS
This number is used to specify the expected maximum bandwidth
(in bytes / sec) for the meter.  When the expected maximum bandwidth
(\fImaxBytes\fP) is exceeded then the network meter will display the
relative percentage of network usage (25% incomming, 75% outgoing).
.RE

xosview*netIface: \fIinterface\fP
.RS
If False, xosview will display the data received/transmitted by any of
the network interfaces. Otherwise, xosview will only display the data
received/transmitted by the specified network interface.
.RE

.cc net In incoming

.cc net Out outgoing

xosview*netBackground: \fIcolor\fP
.RS
This is the color that the network meter will use for the "idle" field.
.RE

.SS NFSStats (Client) Resources

.xt NFSStats

.cc NFSStat ReTrans "retransmit stats"

.cc NFSStat AuthRefrsh "auth refresh stats"

.cc NFSStat Calls "call stats"

.cc NFSStat Idle "idle stats"

.SS NFSDStats (Server) Resources

.xt NFSDStats

.cc NFSDStat Calls "call stats"

.cc NFSDStat BadCalls "bad stats"

.cc NFSDStat UDP "UDP stats"

.cc NFSDStat TCP "TCP stats"

.cc NFSDStat Idle "idle stats"

.SS Serial Meter Resources
.RS
For this to work on Linux xosview needs to be suid root in order to have
access to the ports.  See the file README.linux which comes with the xosview
distribution for more details.  Running xosview as root may not be a good idea
and this meter is slated for a re-write or removal.
.RE

.xt serial(0-9)
.RS
The ttySx portbase will be autodetected.  Because autodetection can fail, (if
the port is locked by ppp/slip for example) you can specify the
portbase instead of "True".  If a portBase is used then xosview will use
it instead of trying to autodetect.
.RE

.cc serial On "set bit"

.cc serial Off "unset bit"

.SS Interrupt Meter Resources

.xt interrupts

.cc int On "active interrupts"

.cc int Off "inactive interrupts"

xosview*intFormat: (auto, single, all or both)
.RS
Controls the number and type of int meters for SMP systems.
.TS
tab(:);
llx.
single:one meter which combines all cores.
all:seperate meter for each core.  No combined meter.
both:seperate meters for each core plus a combined meter.
auto:a single meter on single core systems else both.
.TE
.RE

.SS Thermal Zone Resources
.RS
Linux supports WAY TOO MANY ways to read temperature.  This is yet
another one.   It was my hope to read the hot and critical thermal trip
points out of /sys directly.  But based on my tests (with a sample size
of two) this is inconsistant.  So, this meter supports configuratble
values that are shared by all thermal zones.
.RE

.xt tzone
.RS
Enabling this creates a seperate meter for each thermal zone found.
.RE

xosview*tzoneForeGround: \fIcolor\fP
.RS
The foreground color for temperatues below the hotTrip point.
.RE

xosview*tzoneBackground: \fIcolor\fP
.RS
The background color.
.RE

.cc tzone Hot "over hotTrip"

.cc tzone Crit "over critTrip"

xosview*tzoneHotTrip:          \fIvalue\fP
.RS
  The temperature (in degrees C) to start displaying in the hot color.
.RE

xosview*tzoneCritTrip:          \fIvalue\fP
.RS
  The temperature (in degrees C) to start displaying in the crit color.
.RE

xosview*tzonePeak:             \fIvalue\fP
.RS
The value to use as a max for the meters.  Note that the used legends will
still report the value read from /sys even if the graphical display hits
this peak.
.RE

.SS Lm Sensors Temperature Resources

.xt lmstemp

xosview*lmstempHighest: value
.RS
Highest temp value displayed, default 100.
.RE

.cc lmstemp Act "actual temperature"

.cc lmstemp High "alarm temperature"

.cc lmstemp Idle "idle temperature"

xosview*lmstemp\fIN\fP: \fIfilename\fP
.RS
Name of temperature file from /proc/sys/dev/sensors/*/*, N=1..
.br
Note if more files with same name exists, only the first is found. There is
currently no possiblity to configure equal named files on different busses
(which would be rarely necessary, I hope).
.br
eg.
.br
xosview*lmstemp1:   temp
xosview*lmstemp2:   remote_temp
.RE

xosview*lmstempLabel\fIN\fP: \fILabelstring\fP
.RS
N-th label for above temperatures, default is TMP.
.RE

.SS Coretemp Meter Resources
.RS
Intel Core / AMD K8+ / VIA C7 Temperature Sensor Resources.
.RE

.xt coretemp

xosview*coretempHighest: 100
.RS
Highest temp value displayed, default 100. If CPU throttling temperature
(tjMax) is supplied by the operating system, it is used instead.
.RE

xosview*coretempHigh: \fInumber\fP
.RS
Value to use as alarm temperature, default is coretempHighest. If a usable
value, such as the temperature for which maximum cooling is required, is
supplied by the operating system, it is used instead.
.RE

.cc coretemp Act "actual temperature"

.cc coretemp High "alarm temperature"

.cc coretemp Idle "idle temperature"

xosview*coretempDisplayType: (separate, average or maximum)
.RS
This resource tells xosview how to display the CPU temperature. The formats
work as follows:
.TS
tab(:);
lblx.
separate:T{
Display one meter for each CPU core of a multi-core CPU. This is the default.
T}
average:T{
Display the average of core temperatures of a multi-core CPU. On multi-socket
machines, one meter per physical CPU is displayed.
T}
maximum:T{
Display the highest core temperature of a multi-core CPU. On multi-socket
machines, one meter per physical CPU is displayed.
T}
.TE
.RE

.SS BSD Sensor Resources

.xt bsdsensor

xosview*bsdsensorHighest: \fInumber\fP
.RS
Highest value displayed. If not given, or too small, the meter will adjust
to fit actual and alarm values. Can be overridden for any meter with
bsdsensorHighest\fIN\fP.
.RE

.cc bsdsensor Act "actual value"

.cc bsdsensor High "alarm value"

.cc bsdsensor Low "below low alarm value"

.cc bsdsensor Idle "idle values"

xosview*bsdsensor\fIN\fP:     \fIname.type\fP
.br
xosview*bsdsensorHigh\fIN\fP: \fIname.type\fP
.br
xosview*bsdsensorLow\fIN\fP:  \fIname.type\fP
.RS
These define where the actual value, high alarm value and low alarm value for
meter N=1,2,3,... will be read from. The name is the sensor driver, and type is
the wanted value. Both alarm values are optional, and can also be given as
static numerical values.
.br

You can find the correct pair for OpenBSD and DragonFly BSD with systat
command, e.g.
.br
xosview*bsdsensor1:     it0.temp1
.br
xosview*bsdsensorHigh1: 100

On NetBSD, you can find the driver name with envstat command. Value name for
the actual reading is typically 'cur-value' and for high alarm 'critical-max'
and for low alarm 'critical-min', e.g.
.br
xosview*bsdsensor2:     coretemp0.cur-value
.br
xosview*bsdsensorHigh2: coretemp0.critical-max

For all possible NetBSD value names, refer to envstat source code.

FreeBSD has no usable sensor drivers as of version 9.0. However, ACPI thermal
zones can be used by defining the sysctl node below hw.acpi.thermal, e.g.
.br
xosview*bsdsensor1:     tz0.temperature
.br
xosview*bsdsensorHigh1: tz0._CRT
.br

ACPI thermal zones can be used like this on DragonFly BSD as well.
.RE

xosview*bsdsensorLabel\fIN\fP: \fIstring\fP
.RS
N-th label for above meters, default is SEN\fIN\fP.
.RE

xosview*bsdsensorHighest\fIN\fP: \fInumber\fP
.RS
Override default bsdsensorHighest for meter N.
.RE

.SS Battery Meter Resources

.xt battery

.cc battery Left "available capacity"

.cc battery Used "capacity used"

.cc battery Charge "time left"

.cc battery Full "full charge"

.cc battery Low "below 25% capacity"

.cc battery Crit "below 5% capacity"

.cc battery None "no battery"

.SS Disk Meter Resources

.xt disk

.cc disk Used "bytes transferred (in or out)"

.cc disk Idle idle

.cc disk Write "write"

.cc disk Read "read"

xosview*diskBandwidth: \fIbandwidth\fP
.RS
This number is used to specify the expected maximum bandwidth in bytes
per second for the disk meter.
.RE

.SS File System Meter Resources

.xt filesys

xosview*filesysMounts: \fIlist\fP
.RS
This value can be either auto or a space seperated list of mount points.
If a mount point is not actually mounted then the meter will display
the background using filesysNoneColor and continue to monitor the location.
When a mount is made on that location then the meter will display normally.
If the value of filesysMouts is auto, then meters will be created for every
filesystem that has an absolute path as a source.  For example
"/dev/sda1 -> /" would be monitored but "tmpfs -> /tmp" would not be.
.RE

.cc filesys FG "used space"

.cc filesys BG "free space"

.cc filesys None "bg color when path is unmounted"

.SS RAID Meter Resources

.xt RAID

xosview*RAIDdevicecount: \fIint\fP
.RS
Please enter your RAID device count (n) here or 0 if you don't have any
supported RAID devices. xosview then will display n RAID state displays.
.RE

.cc RAIDdisk Online "online"

.cc RAIDdisk Failure "failure"

.cc RAIDresyncdone "resync done"

.cc RAIDresynctodo "resync todo"

.cc RAIDresynccomplete "resync complete"

.SH OBTAINING

The most current version of xosview can be found at the following site:

.RS
@PACKAGE_URL@
.RE

  The projects source tree is also available here.

.SH BUGS

Here is a list of known bugs.  Reports of unknown bugs are
appreciated and should be directed to:

.RS
@PACKAGE_BUGREPORT@
.RS
Bug tracking system.
.RE
.RE

.SH AUTHORS

Mike Romberg  (mike-romberg@comcast.net)
.RS
Original author, Linux, HPUX, minix and cygwin ports.
.RE

Brian Grayson (bgrayson@netbsd.org)
.RS
NetBSD port and most of the nice enhancements for version 1.4,
initial work on FreeBSD port.
.RE

Scott McNab (jedi@tartarus.uwa.edu.au)
.RS
Added the scrolling graph mode.
.RE

Tom Pavel (pavel@slac.stanford.edu)
.RS
Most of the FreeBSD support, more resource-handling improvements.
.RE

Greg Onufer (exodus@cheers.bungi.com)
.RS
SunOS port.
.RE

Stefan Eilemann (eilemann@gmail.com)
.RS
IRIX 6.5 port.
.RE

Sheldon Hearn (axl@iafrica.com)
.RS
FreeBSD libdevstat-based diskmeter support.
.RE

David W. Talmage (talmage@jefferson.cmf.nrl.navy.mil)
.RS
Added battery-meter support to NetBSD.
.RE

Oleg Safiullin (form@openbsd.org)
.RS
OpenBSD interrupt-meter support.
.RE

Werner Fink (werner@suse.de)
.RS
Originator of the loadmeter.
.RE

Massimiliano Ghilardi ( ghilardi@cibs.sns.it )
.RS
Linux pagemeter.
.RE

Carsten Schabacker (cschaba@spock.central.de)
.RS
Made extensions to the serial-meter.
.RE

Paal Beyer <pbeyer@online.no>
.RS
Ported the linux memstat kernel module to linux-2.1
.RE

Jerome Forissier <forissier@isia.cma.fr>
.RS
Maintains the linux SMP kernel patch which xosview uses to display meters
for each cpu.  This patch can be found at the following URL:
.RS
http://www-isia.cma.fr/~forissie/smp_kernel_patch/
.RE
.RE

Tomer Klainer <mandor@cs.huji.ac.il>
.RS
Initial port to BSDI.
.RE

Arno Augustin (Arno.Augustin@3SOFT.de)
.RS
Solaris disk and network meters.
.RE

Alberto BARSELLA <ishark@lsh01.univ-lille1.fr>
.RS
Fixes for linux diskmeter + ip_chains support
.RE

Thomas Waldmann (ThomasWaldmann@gmx.de)
.RS
Linux raid meter, bitfieldmeter.
Many cosmetic fixes.
.RE

Leopold Toetsch <lt@toetsch.at>
.RS
Linux lms temp meter.
.RE

David O'Brien (obrien@nuxi.com)
.RS
FreeBSD 4.* updates, and a few other suggestions.
.RE

Christos Zoulas (christos@netbsd.org)
.RS
C++ standard compliance and other NetBSD fixes.
.RE

And many others who have sent in small fixes and improvements.
