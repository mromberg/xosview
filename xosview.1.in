.\"===========================================================
.\"===========================================================
.\"           DO NOT EDIT xosview.1
.\" @configure_input@
.\"===========================================================
.TH XOSVIEW @PACKAGE_VERSION@
.UC
.SH NAME
xosview \- X based system monitor
.SH SYNOPSIS
xosview [options]
.\"  ================  Macros  =============================
.\"  First, let's define some handy roff macros.
.\"  A macro begins with .de <xx> where one will invoke this macro with .xx
.\"  The macro definition ends with the .. line.
.\"  I don't know what macro abbreviations are free, so I just chose a few,
.\"  and haven't noticed a problem so far!  bgrayson

.\"  There are several paragraphs that are repeated in the resource section.
.\"  Rather than typing the whole stuff out each time, we define a few macros.

.\"  The .pp macro takes a single argument (net, disk, etc), and
.\" prints a paragraph description of a Priority resource.  Only the
.\" header (xosview*diskPriority: \fIpriority\fP) needs to be specified in
.\" addition to the .pp macro.
.\"  Usage:   .pp load
.de pp
xosview*\\$1Priority: \fIpriority\fP
.RS
This number (which must be an integer >= 1) sets the number of tenths of
a second that the \\$1 meter waits between updates.  A value of 1 has xosview
update the meter 10 times per second (the fastest).  A value of 600 would
cause xosview to update the meter once a minute.
.RE
..
.\"  The .dc macro is similar to the .pp macro, except that it is for
.\" the decay resource paragraphs.
.\"  Usage:  .dc net
.de dc
xosview*\\$1Decay: (True or False)
.RS
If True then the \\$1 meter will be split vertically in two.  The top
half will show the instantaneous state, while the bottom half will
display a decaying average of the state.
.RE
..
.\" The .dg macro is similar to the .dc macro, except that it is for
.\" the scrolling graph resource paragraphs.
.\" Usage:  .dg net
.de dg
xosview*\\$1Graph: (True or False)
.RS
If this is set to True then the \\$1 meter will be drawn as a horizontally
scrolling bargraph showing the state value verses time.
.RE
..
.\"  The .pm macro is for ``plus/minus'' -- for the
.\"  enable/disable command-line options.
.de pm
-\\$1
.RS
This option overrides the xosview*\\$1 resource.  It is
equivalent to setting xosview*\\$1 to "False".
.RE
+\\$1
.RS
This option overrides the xosview*\\$1 resource.  It is
equivalent to setting xosview*\\$1 to "True".
.RE
..
.\"  The .xt macro is for ``Xresource true'' -- for enabling a
.\"  meter, like the .pm macro/-+foo.
.de xt
xosview*\\$1: (True or False)
.RS
If True then xosview will display a \\$1 meter.
.RE
..
.\"  The .ud macro is for the ``used decay'' option.
.de ud
xosview*\\$1UsedDecay:   (True or False)
.RS
If True then xosview will display the used labels as an average
over the last N samples.  N is a vague number set at the
factory.  It reduces the text drawing load on the X server.
.RE
..
.\"  The .uf macro is for the ``used format'' stuff.
.de uf
xosview*\\$1UsedFormat:	  (float, percent or autoscale)
.RS
This resource tells xosview how to display "used" labels.  The formats work
as follows:

\fBfloat\fP:
.RS
Display the value as a floating point number.
.RE
\fBpercent\fP:
.RS
Display the value as a percentage of the total.
.RE
\fBautoscale\fP:
.RS
Display the absolute value and automatically print the units (K, M, or G) as
appropriate.
.RE
.RE
..
.\"  Define a color macro for the various xosview*fooXXXColor: resources.
.\"  Usage:  .cc swap Used used "swap space"  <--  keep 'swap
\"                                                       space' as one arg.
.de cc
xosview*\\$1\\$2Color: \fIcolor\fP
.RS
The \\$1 meter will use this color to display the \\$3 field.
.RE
..
.\"  ================  End of Macros  =============================
.SH DESCRIPTION
\fIxosview\fP is a program which displays the status of several system based
parameters.  These include CPU usage, load average, memory usage, swap
space usage, network usage, interrupts, and serial port status and more.
Each of these is displayed as a horizontal bar which is separated into color
coded regions.  Each region represents a percentage of the resource which is
being put to a particular use.  Typing a 'q' in the window will terminate
xosview.

At the moment \fIxosview\fP runs on eight platforms (Linux,
NetBSD, FreeBSD, OpenBSD, some Solaris systems, IRIX 6.5, HPUX and GNU).
Not all of the meters described below are supported on all
platforms.  Some of the meters may appear different depending upon the
platform \fIxosview\fP is running on.  Note that *BSD is used as
an abbreviation for all three of the free BSD operating systems
(NetBSD, FreeBSD, OpenBSD).

\fBLoad\fP
   all platforms  :  load

\fBCPU Usage\fP
   Linux  : user | nice | system | iowat | irq | softirq |
            stolen | guest | nice guest | idle
   *BSD   : user | nice | system | interrupt | idle
   IRIX   : user | system | interrupt | wait | idle
   HPUX   : user | nice | system | interrupt | idle

\fBMemory Usage\fP
   Linux  : used | buffers | cached | swap cache | free
   NetBSD : active | inactive | wired | free
   FreeBSD: active | inactive | wired | buffer | free
   OpenBSD: active | inactive | wired | free
   IRIX   : kernel | fs   | user    | free
   HPUX   : text | used   | other   | free
   GNU    : active | inactive | wired | free

\fBSwap Usage\fP
   all platforms except IRIX: used | free

\fBDisk Usage (bytes/sec)\fP
   Linux  : in  |  out  | idle
   *BSD   : transferred | idle
   HPUX   : < Not Supported >

\fBPage Swapping from/to disk\fP
   all platforms except IRIX  : in | out | idle

\fBNET Usage\fP
    bytes/sec
    Linux  : in | out | idle
    *BSD   : in | out | idle
    HPUX   : < Not Supported >

\fBGFX Usage\fP
    swapbuffers/sec
    IRIX   : number of swapbuffers

\fBInterrupts\fP
    "leds" which blink when an interrupt occurs.
    Linux  : IRQs 0 - 64 (per cpu if configured)
    *BSD   : IRQs 0 - 15 (or fewer, depending on architecture)
    HPUX   : < Not Supported >

\fBInterrupt rate\fP
    interrupts per second
    Linux  : interrupts | free
    *BSD   : interrupts | free
    HPUX   : < Not Supported >

\fBSerial Port Status\fP
    "leds" which show the serial port parameters.
    Linux  : Both the Line Status Register
             (LSR) and Modem Status Register
             (MSR) are displayed.
    *BSD   : < Not Supported >
    HPUX   : < Not Supported >

\fBBattery Level\fP
    Shows the current condition of the
    battery (for laptops).
    Linux  : %left | %used
    NetBSD : %left | %used
    FreeBSD: < Not Supported >
    OpenBSD: %left | %used
    HPUX   : < Not Supported >

\fBRAID status\fP
    Shows the state of disks contained in your (software)
    RAID1/4/5 array(s) and the rebuild state of the
    array(s).
    Linux  : Disk0 Disk1 Disk2 .. DiskN | Rebuild Progress

.SH OPTIONS

Almost all of these command line options are just a convenient way to set one or
more of xosview's resources.  All resouces set on the command line will override
those specified anywhere else.  Please see the \fBRESOURCES\fP section for
more details on what the resource is for and for the overall scheme of how
resource values are found.

--help, -h
.RS
Displays usage information to stdout and exits.
.RE

--version, -v
.RS
Displays the version information and exits.
.RE

--display, -display \fIname\fP
.RS
Sets the X display to \fIname\fP.
.RE

--title, -title \fIname\fP
.RS
This option sets the name xosview will tell the window manager to use for
the X window and icon.  This option overrides the xosview*title resource.
.RE

-geometry, -g \fIgeometry\fP
.RS
Sets the X geometry to \fIgeometry_string\fP.  This option overrides the
xosview*geometry resource.
.RE

--foreground, -fg \fIcolor\fP
.RS
The \fIcolor\fP to use for the foreground.
.RE

--background, -bg \fIcolor\fP
.RS
The \fIcolor\fP to use for the background.
.RE

-font, -fn \fIfontName\fP
.RS
Specifies the \fIfontName\fP xosview will use for labels.  This option
overrides the xosview*font resource.  Not all fonts currently work well
with xosview.  For more details see the \fBRESOURCES\fP section.
.RE

--iconic, -iconic
.RS
Request to start in an iconic state.
.RE

--name, -name \fIname\fP
.RS
Sets the Resource name xosview will use (same as the -name option
for typical X applications like xterm).  When performing resource
lookups, xosview will look under \fIname\fP, and then under
``xosview''.
.RE

-xrm, -x \fIspec\fP
.RS
This switch allows any of xosview's resources to be set on the command line.
An example of how the xosview*memFreeColor could be set using this option is
shown below (Note the use of \(dq to prevent the shell from expanding
\'*\' or from creating two separate arguments, \'xosview*memfreeColor:\'
and \'purple\'):
.RS
-xrm "xosview*memFreeColor: purple"
.RE
.RE

--option, -o \fIspec\fP
.RS
This option is exactly the same as -xrm except that you do not need to
specify an instance name (such as xosview*).  It will be prepended for you.
So, this will also set the xosview*memFreeColor to purple:
.RS
-o "memFreeColor: purple"
.RE
.RE

--config, -c \fIfileName\fP
.RS
Load an XResource file.  This file will override (not replace) any previous
resources.  See the \fBRESOURCES\fP section for more details.
.RE

--xrm-dump, -xrmd
.RS
Dump the X resouces seen by xosview to stdout and exit.  This will show a
final list of all resources seen after loading and merging is finished.
.RE



.SH X RESOURCES

The following is a list of X resources supported by \fIxosview\fP.  Each has
a default value assigned to it.  These values can be found in the file
Xdefaults which can be obtained in the source distribution of xosview.
They can be overridden in the usual places (/usr/lib/X11/app-defaults/XOsview,
$HOME/.Xdefaults, etc.).

It should be noted that it is OK to have a resource defined for a port of
xosview that does not support the feature the resource configures.  Xosview
will simply ignore the resources that are set for it but not supported on
a given platform.

The resouces used by xosview are located and loaded in the following order.
Each layer overrides the previous.  And, of course, the best match is used.
For example ".xosview*font" overrides the more generic "*font".

.RS
.nr step 1 1
From first loaded/searched to last:
.IP \n[step] 3
An embeded copy of Xdefaults used to build xosview.  So, xosview always has
a default and complete set of resources even if all other options fail.
.IP \n+[step]
Standard X11 search paths and mechanics (XAPPLRESDIR, .Xdefault, xmodmap, etc).  For full details see the X documentation. The following is a short summary:
.RS
.IP \[bu] 2
From the class file (XOsview) found in the \fPapp-defaults\fI directory
configured into xosview at compile time.
.IP \[bu]
From the class file (XOsview) in the XAPPLRESDIR (environment variable).
.IP \[bu]
From resources loaded onto the Display of the X server (by xrdb for example).
.IP \[bu]
From resources loaded onto the Screen of the Display
(again by xrdb or the like).
.IP \[bu]
From the .Xdefaults file in the users HOME (environment variable) directory.  Xosview loads this file even if your X session did not.
.IP \[bu]
From resources found in the file specified by the XENVIRONMENT environment variable.
.RE
.IP \n+[step]
Resource files specified by the -c, --config command line arguments
.IP \n+[step]
Resources set by using the -xrm command line argument(s).
.IP \n+[step]
Command line options (such as -display) that set resources.
.RE

  Note that since xosview always starts off with a complete set of resources
it needs then you only need specify those options you would like to change from
their default values.  For example your .Xdefaults file could simply contain
the line "xosview*background: blue" if all you wish is an "stock" xosview
with a blue background.

\fBGeneral Resources\fP


xosview*title: \fIname\fP
.RS
The string that xosview will use for the X window title.  Normally xosview
will use 'xosview@machine_name' for a title.  This resource overrides the
default behavior.
.RE

xosview*geometry: \fIgeometry_string\fP
.RS
This is a standard X geometry string that defines the size and location of
the X window used by xosview.
.RE

xosview*display: \fIname\fP
.RS
The name of the display where xosview will contact the X server for drawing
its window.
.RE

xosview*pixmapName: \fIname\fP
.RS
The filename of an X pixmap (xpm) file for use as a background
image.
.RE

xosview*transparent: (True or False)
.RS
If True set the window background to transparent.  EXPERIMENTAL.
.RE

xosview*captions: (True or False)
.RS
If True then xosview will display meter captions.
.RE

xosview*labels: (True or False)
.RS
If True then xosview will display meter labels.
.RE

xosview*meterLabelColor: \fIcolor\fP
.RS
The color to use for the meter labels.
.RE

xosview*usedlabels: (True or False)
.RS
If True then xosview will display labels that show the percentage of the
resource (or absolute amount, depending on the meter) being used.  This
option requires that the labels option also be set to True.
.RE

xosview*usedLabelColor: \fIcolor\fP
.RS
The color to use for "used" labels.
.RE

xosview*font: \fIfont\fP
.RS
This is the font that xosview will use.  Currently the xosview text
rendering code assumes that a mono spaced (fixed width) font.  So,
things will most likely look poor with a non mono spaced font.  If the
build system supports Xft then xosview will switch to using freetype2 fonts.
Otherwise core X11 fonts are used.
.RE

xosview*background: \fIcolor\fP
.RS
This is the color that will be used for the background.
.RE

xosview*foreground: \fIcolor\fP
.RS
This is the color that will be used for the foreground.
.RE

xosview*enableStipple:	(True or False)
.RS
Change to true to try stipple support.  This is primarily for users
stuck with 1-bit monitors/display cards.  Try setting enableStipple
true.  Please give us feedback on this, if you use it.  It needs
some more work, but no one has given us any feedback so far.
.RE

xosview*graphNumCols: \fInumber\fP
.RS
This defines the number of sample bars drawn when a meter is in scrolling
graph mode. This also has the side-effect of defining the width of the
graph columns. This is only used by meters which have graph mode enabled.
.RE


\fBLoad Meter Resources\fP


.\"  Do the load: True resource.
.xt load

xosview*loadWarnColor: \fIcolor\fP
.RS
This is the color that the load meter will use once the load average is
greater than the loadWarnThreshold.
.RE

xosview*loadCritColor: \fIcolor\fP
.RS
This is the color that the load meter will use once the load average is
greater than the loadCritThreshold (peaked).
.RE

xosview*loadProcColor: \fIcolor\fP
.RS
This is the color that the load meter will use to display the load average
when it is less than the loadWarnThreshold.
.RE

.\"  loadIdleColor
.cc load Idle idle

.\"  Do the priority resource
.pp load

xosview*loadWarnThreshold: \fIint\fP
.RS
This number (which must be an integer >= 1) sets the value at which
the loadmeter changes its status and color from "normal" to "alarm".
The default value is 2.
.RE

xosview*loadCritThreshold: \fIint\fP
.RS
This number (which must be an integer >= 1) sets the value at which
the loadmeter changes its status and color from "normal" to "alarm".
It is also the value that will be used for the peak of the meter.  The
meter will still show the total load in the used level when peaked.
.RE

xosview*loadDecay: (True or False)
.RS
You should probably leave this at the default value (False).  The load
is already a time-averaged value!
.RE

.dg load

.\"  loadUsedFormat resource
.uf load

xosview*loadCpuSpeed:   (True or False)
.RS
Display the current CPU speed in the load meter.
.RE

\fBCPU Meter Resources\fP


xosview*cpu: (True or False)
.RS
If True then xosview will display a cpu meter.  On linux or IRIX 6.5
SMP machines, the resource cpuFormat decides which meters are
created for multiple CPUs.
.RE

.\"  cpuUserColor, cpuNiceColor, cpuSystemColor, cpuWaitColor, cpuInterruptColor, cpuSoftIntColor, cpuStolenColor, cpuGuestColor, cpuNiceGuestColor, cpuFreeColor
.cc cpu User "cpu user time"
.cc cpu Nice "cpu nice time"
.cc cpu System "cpu system time"
.cc cpu Wait "cpu IO wait time"
.cc cpu Interrupt "cpu IRQ time"
.cc cpu SoftInt   "cpu soft IRQ time"
.cc cpu Stolen    "cpu time spent in host OS"
.cc cpu Guest     "cpu time spent on guest cpu"
.cc cpu NiceGuest  "cpu time spent on niced guest cpu"
.cc cpu Free "cpu idle time"

.\"  Priority, decay, usedFormat resources:
.pp cpu
.dc cpu
.dg cpu
.uf cpu
.ud cpu

\fBMemory Meter Resources\fP


.\"  Do the mem: True resource.
.xt mem

.\"  mem{Used,Cache,Buffer,...}Color resources
.cc mem Used "used memory"
.cc mem Buffer "buffer memory"
.cc mem Cache "cache memory"
.cc mem SwapCache "cache memory that has been swaped once"
.cc mem Free "free memory"
.cc mem Text "HP text memory"
.cc mem Other "HP ``other'' memory"
.cc mem Active "NetBSD active memory"
.cc mem Inactive "NetBSD inactive memory"

.\"  Priority, decay, usedFormat resources:
.pp mem
.dc mem
.dg mem
.uf mem


\fBSwap Meter Resources\fP

.\"  Do the swap: True resource.
.xt swap

.\"  swap{Used,Free}Color resources.
.cc swap Used "used swap"
.cc swap Free "free swap"

.\"  Priority, decay, usedFormat resources:
.pp swap
.dc swap
.dg swap
.uf swap
.ud swap

\fBIRQ rate Meter Resources\fP

.xt irqrate
.cc irqrate Used "used irq rate"
.cc irqrate Free "free irq rate"
.pp irqrate
xosview*irqratePeak: \fIpeakIRQRate\fP
.RS
  This number is the peak value for the field meter in irq/sec.  The used
label will still report values over this peak.
.RE
.uf irqrate
.ud irqrate
.dc irqrate
.dg irqrate

\fBPage Swapping Meter Resources\fP

.\"  Do the page: True resource.
.xt page

xosview*pageBandWidth: \fImaxEvents\fP
.RS
This number is used to specify the expected maximum bandwidth (in events /
sec) for the page meter.  When the expected maximum bandwidth
(\fImaxEvents\fP) is exceeded then the page meter will display the relative
percentage of page swapping (25% in, 75% out).
.RE

.\"  page{In,Out,Idle}Color:
.cc page In page-in
.cc page Out page-out
.cc page Idle idle

.\"  Priority, decay, usedFormat resources:
.pp page
.dc page
.dg page
.uf page
.ud page


\fBGfx Meter Resources\fP


xosview*gfx:	(True or False)
.RS
If True xosview will display the GfxMeter. The value is sampled once per
second, due to the usage of sadc to sample data.
.RE

xosview*gfxWarnColor: \fIcolor\fP
.RS
This is the color that the gfx meter will use once the warn state is
reached.
.RE

xosview*gfxAlarmColor: \fIcolor\fP
.RS
This is the color that the gfx meter will use once the alarm state is
reached.
.RE

xosview*gfxSwapColor: \fIcolor\fP
.RS
This is the color that the gfx meter will use in normal state
.RE

.\"  gfxIdleColor
.cc gfx Idle idle

.\"  Do the priority resource
.pp gfx

xosview*gfxWarnThreshold: \fIint\fP
.RS
This number (which must be an integer >= 1) of swapbuffers per second
and pipe at which the gfxmeter changes its status and color from
"normal" to "warn". The default value is 60.
.RE

xosview*gfxAlarmThreshold: \fIint\fP
.RS
This number (which must be an integer >= gfxWarnThreshold) of
swapbuffers per second and pipe at which the gfxmeter changes its status
and color from "warn" to "alarm". The default value is 120.
.RE

xosview*gfxDecay: (True or False)
.RS
You should probably leave this at the default value (False).  The gfx
does not work in decay mode.
.RE

.dg gfx

.\"  gfxUsedFormat resource
.uf gfx

\fBWireless Link Meter Resouces\fP

.xt wlink
.RS
This meter shows wireless link quality.  What
is quality you might ask?  It is a number between zero and 70.  Beyond that
you are on your own.  Anway Linux systems will display this value and let
you set a warning threshold when it is "low".  If this meter is enabled
and no wireless connections exists it will just sit there and display zero.
.RE
xosview*wlinkBackground: \fIcolor\fP
.RS
  The \fIcolor\fP to use to display the background area of the meter.
.RE
xosview*wlinkGoodColor: \fIcolor\fP
.RS
The \fIcolor\fP to use for the display of the link value when it is
above the \fIwlinkPoorValue\fP threshold.
.RE
xosview*wlinkPoorColor:  \fIcolor\fP
.RS
The \fIcolor\fP to use for the display of the link value when it is
below the \fwlinkPoorValue\fP threshold.
.RE
xosview*wlinkPoorValue:  \fIvalue\fP
.RS
The threshold \fIvalue\fP to use to switch between wlinkGoodColor and
wlinkPoorColor.
.RE
.pp wlink
.dc wlink
.dg wlink
.uf wlink
.ud wlink

\fBNetwork Meter Resources\fP


xosview*net:	(True or False)
.RS
If True xosview will display the NetMeter.  Linux users will have to configure
their kernels and setup some ip accounting rules to make this work.  See the
file README.linux which comes with the xosview distribution for details.
.RE

xosview*netBandwidth: \fImaxBytes\fP
.RS
This number is used to specify the expected maximum bandwidth
(in bytes / sec) for the meter.  When the expected maximum bandwidth
(\fImaxBytes\fP) is exceeded then the network meter will display the
relative percentage of network usage (25% incomming, 75% outgoing).
.RE

xosview*netIface: \fIinterface\fP
.RS
If False, xosview will display the data received/transmitted by any of
the network interfaces. Otherwise, xosview will only display the data
received/transmitted by the specified network interface.

.\"  net{In,Out}Color:
.cc net In incoming
.cc net Out outgoing
.\"  FIXME XXX  Change the netBackground resource to be netIdleColor.

xosview*netBackground: \fIcolor\fP
.RS
This is the color that the network meter will use for the "idle" field.
.RE

.\"  Priority, decay, usedFormat resources:
.pp net
.dc net
.dg net
.uf net
.ud net

\fBNFSStats (Client) Resources\fP


xosview*NFSStats: (True or False)
.RS
If True then xosview will display a meter to monitor NFS client stats.
.RE

xosview*NFSStatReTransColor: \fIcolor\fP
.RS
The color to be used for retransmit stats.
.RE

xosview*NFSStatAuthRefrshColor:	\fIcolor\fP
.RS
The color to be used for auth refresh stats.
.RE

xosview*NFSStatCallsColor: \fIcolor\fP
.RS
The color to be used for call stats.
.RE

xosview*NFSStatIdleColor: \fIcolor\fP
.RS
The color to be used for idle stats.
.RE


\fBNFSDStats (Server) Resources\fP

xosview*NFSDStats: (True or False)
.RS
If True xosview will display a meter for NFS server/daemon stats.
.RE

xosview*NFSDStatCallsColor: \fIcolor\fP
.RS
The color to be used for call stats.
.RE

xosview*NFSDStatBadCallsColor: \fIcolor\fP
.RS
The color to be used for bad stats.
.RE

xosview*NFSDStatUDPColor: \fIcolor\fP
.RS
The color to be used for UDP stats.
.RE

xosview*NFSDStatTCPColor: \fIcolor\fP
.RS
The color to be used for TCP stats.
.RE

xosview*NFSDStatIdleColor: \fIcolor\fP
.RS
The color to be used for idle stats.
.RE
.uf NFSDStat
.ud NFSDStat


\fBSerial Meter Resources\fP


xosview*serial(0-9): (True, False, or portBase)
.RS
If True then xosview will display a serial meter for ttySx.  The
portbase will be autodetected.  Because autodetection can fail, (if
the port is locked by ppp/slip for example) you can specify the
portbase instead of "True".  If a portBase is used then xosview will use
it instead of trying to autodetect.

For this to work on Linux xosview needs to be suid root in order to have
access to the ports.  See the file README.linux which comes with the xosview
distribution for more details.
.RE

xosview*serialOnColor: \fIcolor\fP
.RS
This is the color the serial meter will use for bits that are set.
.RE

xosview*serialOffColor: \fIcolor\fP
.RS
This is the color the serial meter will use for bits that are not set.
.RE

.\"  Do the priority resource
.pp serial


\fBInterrupt Meter Resources\fP


xosview*interrupts: (True or False)
.RS
If True then xosview will display an interrupt meter.
.RE

xosview*intOnColor: \fIcolor\fP
.RS
This is the color that will be used to show "active" interrupts.
.RE

xosview*intOffColor: \fIcolor\fP
.RS
This is the color that will be used to show "inactive" interrupts.
.RE

xosview*intFormat: (single, all, both or auto)
.RS
Linux only.
.RE
.RS
If single, only a cumulative meter for all CPU is created. All creates a
meter for each CPU, but no cumulative meter. Both creates one cumulative
meter and one per cpu. auto behaves like single on uniprocessor system,
and like both on multiprocessor systems.
.RE

.\"  Do the priority resource
.pp int

\fBThermal Zone Resources\fP

.RS
Linux supports WAY TOO MANY ways to read temperature.  This is yet
another one.   It was my hope to read the hot and critical thermal trip
points out of /sys directly.  But based on my tests (with a sample size
of two) this is inconsistant.  So, this meter supports configuratble
values that are shared by all thermal zones.
.RE

.xt tzone
.RS
Enabling this creates a seperate meter for each thermal zone found.
.RE
xosview*tzoneForeGround: \fIcolor\fP
.RS
The foreground color for temperatues below the hotTrip point.
.RE
xosview*tzoneBackground: \fIcolor\fP
.RS
The background color.
.RE
xosview*tzoneHotColor: \fIcolor\fP
.RS
The foreground color for temperatues over the hotTrip point and under
the critTrip point.
.RE
xosview*tzoneCritColor: \fIcolor\fP
.RS
The foreground color for temperatues over the critTrip point.
.RE
xosview*tzoneHotTrip:          \fIvalue\fP
.RS
  The temperature (in degrees C) to start displaying in the hot color.
.RE
xosview*tzoneCritTrip:          \fIvalue\fP
.RS
  The temperature (in degrees C) to start displaying in the crit color.
.RE
xosview*tzonePeak:             \fIvalue\fP
.RS
The value to use as a max for the meters.  Note that the used legends will
still report the value read from /sys even if the graphical display hits
this peak.
.RE
.pp tzone
.dc tzone
.dg tzone
.uf tzone
.ud tzone

\fBLm Sensors Temperature Resources\fP

.xt lmstemp

xosview*lmstempHighest:	100
.RS
Highest temp value displayed, default 100.
.RE

xosview*lmstempActColor:  \fIcolor\fP
.RS
Color of actual temperature.
.RE

xosview*lmstempHighColor:  \fIcolor\fP
.RS
Color above alarm temperature, also used to indicate alarm.
.RE

xosview*lmstempIdleColor:   \fIcolor\fP
.RS
Color between actual and alarm temperatures.
.RE

xosview*lmstemp\fIN\fP:	\fIfilename\fP
.RS
Name of temperature file from /proc/sys/dev/sensors/*/*, N=1..
.br
Note if more files with same name exists, only the first is found. There is
currently no possiblity to configure equal named files on different busses
(which would be rarely necessary, I hope).
.br
eg.
.br
xosview*lmstemp1:	temp
xosview*lmstemp2:	remote_temp
.RE

xosview*lmstempLabel\fIN\fP:	\fILabelstring\fP
.RS
N-th label for above temperatures, default is TMP.
.RE

.pp lmstemp
.uf lmstemp


\fBIntel Core / AMD K8+ / VIA C7 Temperature Sensor Resources\fP

.xt coretemp

xosview*coretempHighest: 100
.RS
Highest temp value displayed, default 100. If CPU throttling temperature
(tjMax) is supplied by the operating system, it is used instead.
.RE

xosview*coretempHigh: \fInumber\fP
.RS
Value to use as alarm temperature, default is coretempHighest. If a usable
value, such as the temperature for which maximum cooling is required, is
supplied by the operating system, it is used instead.
.RE

xosview*coretempActColor:  \fIcolor\fP
.RS
Color of actual temperature.
.RE

xosview*coretempHighColor:  \fIcolor\fP
.RS
Color above alarm temperature, also used to indicate alarm.
.RE

xosview*coretempIdleColor:   \fIcolor\fP
.RS
Color between actual and alarm temperatures.
.RE

xosview*coretempDisplayType: (separate, average or maximum)
.RS
This resource tells xosview how to display the CPU temperature. The formats
work as follows:

\fBseparate\fP:
.RS
Display one meter for each CPU core of a multi-core CPU. This is the default.
.RE
\fBaverage\fP:
.RS
Display the average of core temperatures of a multi-core CPU. On multi-socket
machines, one meter per physical CPU is displayed.
.RE
\fBmaximum\fP:
.RS
Display the highest core temperature of a multi-core CPU. On multi-socket
machines, one meter per physical CPU is displayed.
.RE
.RE

.pp coretemp

.uf coretemp


\fB*BSD Sensor Resources\fP

.xt bsdsensor

xosview*bsdsensorHighest: \fInumber\fP
.RS
Highest value displayed. If not given, or too small, the meter will adjust
to fit actual and alarm values. Can be overridden for any meter with
bsdsensorHighest\fIN\fP.
.RE

xosview*bsdsensorActColor: \fIcolor\fP
.RS
Color of actual value.
.RE

xosview*bsdsensorHighColor: \fIcolor\fP
.RS
Color above high alarm value, also used to indicate alarm.
.RE

xosview*bsdsensorLowColor: \fIcolor\fP
.RS
Color of actual value, when it is below low alarm value.
.RE

xosview*bsdsensorIdleColor: \fIcolor\fP
.RS
Color between actual and high alarm values.
.RE

xosview*bsdsensor\fIN\fP:     \fIname.type\fP
.br
xosview*bsdsensorHigh\fIN\fP: \fIname.type\fP
.br
xosview*bsdsensorLow\fIN\fP:  \fIname.type\fP
.RS
These define where the actual value, high alarm value and low alarm value for
meter N=1,2,3,... will be read from. The name is the sensor driver, and type is
the wanted value. Both alarm values are optional, and can also be given as
static numerical values.
.br

You can find the correct pair for OpenBSD and DragonFly BSD with systat
command, e.g.
.br
xosview*bsdsensor1:     it0.temp1
.br
xosview*bsdsensorHigh1: 100

On NetBSD, you can find the driver name with envstat command. Value name for
the actual reading is typically 'cur-value' and for high alarm 'critical-max'
and for low alarm 'critical-min', e.g.
.br
xosview*bsdsensor2:     coretemp0.cur-value
.br
xosview*bsdsensorHigh2: coretemp0.critical-max

For all possible NetBSD value names, refer to envstat source code.

FreeBSD has no usable sensor drivers as of version 9.0. However, ACPI thermal
zones can be used by defining the sysctl node below hw.acpi.thermal, e.g.
.br
xosview*bsdsensor1:     tz0.temperature
.br
xosview*bsdsensorHigh1: tz0._CRT
.br

ACPI thermal zones can be used like this on DragonFly BSD as well.
.RE

xosview*bsdsensorLabel\fIN\fP: \fIstring\fP
.RS
N-th label for above meters, default is SEN\fIN\fP.
.RE

xosview*bsdsensorHighest\fIN\fP: \fInumber\fP
.RS
Override default bsdsensorHighest for meter N.
.RE

xosview*bsdsensorUsedFormat\fIN\fP: (float, percent or autoscale)
.RS
Override default bsdsensorUsedFormat for meter N.
.RE

.pp bsdsensor

.uf bsdsensor


\fBBattery Meter Resources\fP

xosview*battery: (True or False)
.RS
If True then xosview will display a battery meter.  Linux users will need
to have APM or ACPI support in their kernels for this to work.
For both, APM and ACPI xosview shows the status/sum of all batteries.
Additionally - the legend text gets changed/adjusted to reflect the
current state (charging/low/critical/etc.) of the battery/batteries.
.RE

xosview*batteryLeftColor: \fIcolor\fP
.RS
This is the color that will be used to show the amount of battery power left.
.RE

xosview*batteryUsedColor: \fIcolor\fP
.RS
This is the color that will be used to show the amount of battery power used.
.RE

xosview*batteryChargeColor: \fIcolor\fP
.RS
This is the color that will be used as 'left' - if the batteries get charged.
.RE

xosview*batteryFullColor: \fIcolor\fP
.RS
This is the color that will be used as 'left' - if the batteries are fully charged.
APM and ACPI does provide this info, but not all machines actually do so.
.RE

xosview*batteryLowColor: \fIcolor\fP
.RS
APM only - the 'left' color that will indicate a low battery.
Depends on the machine - e.g. below 25% remaining capacity.
.RE

xosview*batteryCritColor: \fIcolor\fP
.RS
APM case: the 'left' color if APM indicates 'critical' state. (less than 5%)

ACPI case: the 'left' color if the remaining capacity is below the alarm value.
(which can be set by the user in /proc/acpi/battery/BAT[01]/alarm )
.RE

xosview*batteryNoneColor: \fIcolor\fP
.RS
If no battery is present - or all batteries get removed (while on AC).
.RE


.\"  Do the priority resource
.pp battery
.uf battery

\fBDisk Meter Resources\fP

.\"  Do the disk: True resource.
.xt disk

.\"  disk colors
.cc disk Used "bytes transferred (in or out)"
.cc disk Idle idle

xosview*diskBandwidth: \fIbandwidth\fP
.RS
This number is used to specify the expected maximum bandwidth in bytes
per second for the disk meter.
.RE

xosview*diskWriteColor: \fIcolor\fP
.RS
This color will be used for the linux meter to show writes.
.RE

xosview*diskReadColor: \fIcolor\fP
.RS
This color will be used for the linux meter to show reads.
.RE

.\"  Priority, decay, usedFormat resources:
.pp disk
.dc disk
.dg disk
.uf disk
.ud disk

\fBFile System Meter Resources\fP

.\"  Do the filesys: True resource.
.xt filesys

xosview*filesysMounts: \fIlist\fP
.RS
This value can be either auto or a space seperated list of mount points.
If a mount point is not actually mounted then the meter will display
the background using filesysNoneColor and continue to monitor the location.
When a mount is made on that location then the meter will display normally.
If the value of filesysMouts is auto, then meters will be created for every
filesystem that has an absolute path as a source.  For example
"/dev/sda1 -> /" would be monitored but "tmpfs -> /tmp" would not be.
.RE

.\"  filesys colors
.cc filesys FG "used space"

.cc filesys BG "free space"

.cc filesys None "bg color when path is unmounted"

.pp filesys

.dc filesys

.dg filesys

.uf filesys


\fBRAID Meter Resources\fP

.\"  Do the RAID: True resource.
.xt RAID

xosview*RAIDdevicecount: \fIint\fP
.RS
Please enter your RAID device count (n) here or 0 if you don't have any
supported RAID devices. xosview then will display n RAID state displays.
.RE

xosview*RAIDdiskOnlineColor: \fIcolor\fP

xosview*RAIDdiskFailureColor: \fIcolor\fP
.RS
These colors will be used for indicating working/online or failed/offline
disks. The order (from left to right) is the same as in /proc/mdstat.
.RE

xosview*RAIDresyncdoneColor: \fIcolor\fP

xosview*RAIDresynctodoColor: \fIcolor\fP

xosview*RAIDresynccompleteColor: \fIcolor\fP
.RS
If a resync/rebuild of the RAID array is in progress, the "done" and "todo"
colors will be used. If no rebuild/resync is running, then the "complete"
color will be shown.
.RE

.\"  RAIDpriority resource
.pp RAID

.\"  RAIDUsedFormat resource
.uf RAID

.SH OBTAINING

The most current version of xosview can be found at the following site:

.RS
@PACKAGE_URL@
.RE

  The projects source tree is also available here.

.SH BUGS

Here is a list of known bugs.  Reports of unknown bugs are
appreciated and should be directed to:

.RS
@PACKAGE_BUGREPORT@
.RS
Bug tracking system.
.RE
.RE

.SH AUTHORS

Mike Romberg  (mike-romberg@comcast.net)
.RS
Original author, Linux and HPUX ports.
.RE

Brian Grayson (bgrayson@netbsd.org)
.RS
NetBSD port and most of the nice enhancements for version 1.4,
initial work on FreeBSD port.
.RE

Scott McNab (jedi@tartarus.uwa.edu.au)
.RS
Added the scrolling graph mode.
.RE

Tom Pavel (pavel@slac.stanford.edu)
.RS
Most of the FreeBSD support, more resource-handling improvements.
.RE

Greg Onufer (exodus@cheers.bungi.com)
.RS
SunOS port.
.RE

Stefan Eilemann (eilemann@gmail.com)
.RS
IRIX 6.5 port.
.RE

Sheldon Hearn (axl@iafrica.com)
.RS
FreeBSD libdevstat-based diskmeter support.
.RE

David W. Talmage (talmage@jefferson.cmf.nrl.navy.mil)
.RS
Added battery-meter support to NetBSD.
.RE

Oleg Safiullin (form@openbsd.org)
.RS
OpenBSD interrupt-meter support.
.RE

Werner Fink (werner@suse.de)
.RS
Originator of the loadmeter.
.RE

Massimiliano Ghilardi ( ghilardi@cibs.sns.it )
.RS
Linux pagemeter.
.RE

Carsten Schabacker (cschaba@spock.central.de)
.RS
Made extensions to the serial-meter.
.RE

Paal Beyer <pbeyer@online.no>
.RS
Ported the linux memstat kernel module to linux-2.1
.RE

Jerome Forissier <forissier@isia.cma.fr>
.RS
Maintains the linux SMP kernel patch which xosview uses to display meters
for each cpu.  This patch can be found at the following URL:
.RS
http://www-isia.cma.fr/~forissie/smp_kernel_patch/
.RE
.RE

Tomer Klainer <mandor@cs.huji.ac.il>
.RS
Initial port to BSDI.
.RE

Arno Augustin (Arno.Augustin@3SOFT.de)
.RS
Solaris disk and network meters.
.RE

Alberto BARSELLA <ishark@lsh01.univ-lille1.fr>
.RS
Fixes for linux diskmeter + ip_chains support
.RE

Thomas Waldmann (ThomasWaldmann@gmx.de)
.RS
Linux raid meter, bitfieldmeter.
Many cosmetic fixes.
.RE

Leopold Toetsch <lt@toetsch.at>
.RS
Linux lms temp meter.
.RE

David O'Brien (obrien@nuxi.com)
.RS
FreeBSD 4.* updates, and a few other suggestions.
.RE

Christos Zoulas (christos@netbsd.org)
.RS
C++ standard compliance and other NetBSD fixes.
.RE

And many others who have sent in small fixes and improvements.
